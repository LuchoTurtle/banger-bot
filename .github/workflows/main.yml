name: Build and Test

on: [push]

jobs:
  build-test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Homebrew (MacOC only)
        if: matrix.os == 'macos-latest'
        run: |
          brew install libmagic
          
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1.1.0

      - name: Test with pytest and coverage
        run: |
          coverage run --omit="*/tests*" --source=. -m pytest tests/unit -s
          
      # One could create a seperate workflow that creates the badge (since it only works on Ubuntu) but I'd need the '.coverage' file on the other workflow, which would take longer. So let's just push the badge when running on Ubuntu :)
      - name: Coverage badge
        if: matrix.os == 'ubuntu-latest'
        uses: tj-actions/coverage-badge-py@v1.6
        with:
          # Output path to write the badge.
          output: docs/coverage.svg
          overwrite: true
          
      - name: Verify Changed files
        if: matrix.os == 'ubuntu-latest'
        uses: tj-actions/verify-changed-files@v6
        id: changed_files
        with:
          files: docs/coverage.svg

      - name: Commit files
        if: (steps.changed_files.outputs.files_changed == 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add docs/coverage.svg
          git commit -m "Updated coverage.svg"

      - name: Push changes
        if: (steps.changed_files.outputs.files_changed == 'true') && (matrix.os == 'ubuntu-latest')
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.github_token }}
          branch: ${{ github.ref }}
